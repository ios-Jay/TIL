import UIKit

/*
 1) 제 1원칙
 
 - 프로그래밍에서 사용하는 등호(=, Equal)의 의미는 같다는 뜻이 절대로 아니다.
 
 - 프로그래밍에서 사용하는 = (Equal)은 할당의 의미이다.(할당연산자)
 
 - 프로그래밍에서 같다는 == 사용, 같지않다는 != 을 사용한다.
 
 

var a = 5

a = a + 10

- 오른쪽에 있는 값을 왼쪽에 대입(할당)한다는 뜻이다.


 2) 대문자와 소문자의 엄격한 구분
 
 - 대부분의 첫글자는 소문자로 시작한다. (예외적으로 대문자 시작)
 
 - 중간에는 대문자 / 숫자가 쓰일 수 있다.
 



 3) 키워드
 
 - 약속어:스위프트에서 특별한 의미로 사용하겠다고 미리 정해놓은 단어
 
 - 약 70여개의 키워드 존재
 
 - 키워드는 다른 의미로 사용 불가능
 
 - var, func, if...
 


 4) 주석(Comment)
 
 주석(Comment):컴퓨터에게 코드를 읽을 필요 없다고(무시해도 된다고) 알려주는 부분
 일반적으로 프로그래머들이 메모장 처럼 활용
 
 - 한줄 주석 사용(슬래시 두개)
 -     /* 문장*/ (여러줄 주석 사용시)
 -  단축키 Command + / 로 쉽게 주석 사용 가능
 
 5) 세미콜론(;)규칙:스위프트에서는 세미콜론이 선택사항
 
  - 대부분의 다른 언어에서는 필수
  - 하나의 라인에 여러가지 명령문을 사용하고 싶을 경우에는 필수
 
 6) 줄 맞추기
 
 - 일반적으로 중괄호 안에서 들여쓰기(Indentation)를 통해 코드의 가독성을 높임
 - 4칸이 기본 설정
 - 들여쓰기는 코드의 가독성을 높이기 위한 개발자들간의 약속
 
 7) Print 함수
 
 - 모든 첫 프로그래밍의 시작은 출력에서부터 시작
 
 - print:출력을 위한 함수
 
 - 스위프트에서는 프린트 구문에 쌍따옴표("")를 꼭 붙여야 한다.
 
 - 숫자는 쌍따옴표를 붙여도 되고 안 붙여도 된다. 문자열은 꼭 붙여야 한다.
 
 
 */

print("Hello World!")

print("Hello Swift!")



// 8) 리터럴(Literals)

// 코드에서 고정된 값으로 표현되는 문자 (데이터) 그 자체(Int / Double / String / Character / Bool 리터럴 등)

var a = 4    // "오른쪽에는 정수 4를 넣었다."라고 할 수도 있지만, "오른쪽에는 할당하기 위해 <정수 리터럴>값인 정수4를 넣었다."

var b: Int = 8


var name = "홍길동"      // "문자열 리터럴" 값을 넣어야해.

var double = 3.14      //  "더블 리터럴" 값 3.14


"안녕"

4.5


// 9) 식별자(Identifier):변수, 상수, 함수, 사용자 정의 타입의 이름


var name1 = "전지현"

let name2 = "임꺽정"


// 10) 토큰(Token):코드의 가장 작은 단위. 코드에서 더이상 쪼갤 수 없는 최소 단위 (식별자, 키워드, 구두점, 연산자, 리터럴)

//var

//!=

//123

// 토큰은 사이에 빈칸을 추가해선 안됨. (다만, 빈칸을 없애는 것은 때때로 괜찮음)

// 프로그래밍에서는 줄바꿈/탭도 빈칸(공백)으로 인식함. 즉, 빈칸이 여러개 띄어있어도 컴퓨터가 인식하기에는 1개의 빈칸으로 봄

//var aaa = 5

// 11) 표현식(Expression)

// 값, 변수, 연산자의 조합으로 하나의 결과값으로 평가되는 코드 단위

// 하나의 값이 나오는 코드

var n = 5   //       ====> 문 장 (할당하는 작업)

17          // 17    ====> 표현식

n           // 5     ====> 표현식

n + 7       // 12    ====> 표현식

n < 5      // false  ====> 표현식

// 12) 문장(Statement):문장 또는 구문 -> 특정 작업을 실행하는 코드 단위

var n2 = 3    // ====> 문장

print(n)      // ====> 문장

print("안녕")  // ====> 문장



// 토큰(키워드) + 표현식(값) ====> 문장(작업을 명령)

// ⭐️ 문법 설명시 자주 사용할 예정. 자연스럽게 익숙해짐

